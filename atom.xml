<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Horace Williams</title>
 <link href="http://worace.works/atom.xml" rel="self"/>
 <link href="http://worace.works/"/>
 <updated>2018-04-06T08:48:29-07:00</updated>
 <id>http://worace.works</id>
 <author>
   <name>Horace Williams</name>
   <email>horace@worace.works</email>
 </author>

 
 <entry>
   <title>Put a Map On It: Tools for Visualizing Geo Data</title>
   <link href="http://worace.works/2018/03/01/put-a-map-on-it/"/>
   <updated>2018-03-01T00:00:00-08:00</updated>
   <id>http://worace.works/2018/03/01/put-a-map-on-it</id>
   <content type="html">&lt;p&gt;Geospatial data is everywhere these days, and with it comes the need for simple ways to put things on a map.&lt;/p&gt;
&lt;p&gt;Mapping needs fit into a variety of use-cases, from quick-and-dirty visualizations of a few points or polygons to sophisticated, interactive applications that let users search, browse, and edit.&lt;/p&gt;
&lt;p&gt;In this post we&amp;#8217;ll walk through a few of the current options out there in order from simple to complex.&lt;/p&gt;
&lt;h2&gt;Data Formats&lt;/h2&gt;
&lt;p&gt;Before diving into specific mapping tools, a note on data formats.&lt;/p&gt;
&lt;p&gt;The most popular open formats for serializing geospatial data are &lt;a href=&quot;https://en.wikipedia.org/wiki/Well-known_text&quot;&gt;WKT&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/GeoJSON&quot;&gt;GeoJSON&lt;/a&gt;, and &lt;a href=&quot;http://edndoc.esri.com/arcsde/9.1/general_topics/wkb_representation.htm&quot;&gt;WKB&lt;/a&gt; (a binary version of WKT). Each has pros and cons, but on the web GeoJSON is gradually winning out thanks to its obvious JSON compatibility.&lt;/p&gt;
&lt;p&gt;In a nutshell GeoJSON defines standards for representing the fundamental geospatial geometry types (Points, LineStrings, Polygons, MultiPolygons, and some various Collection types) using JSON.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re new to working with GeoJSON or would like to read about it in more detail, the best resource I know is Tom MacWright&amp;#8217;s thorough overview: &lt;a href=&quot;https://macwright.org/2015/03/23/geojson-second-bite&quot;&gt;More than you ever wanted to know about GeoJSON&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Lots of tools work GeoJSON, or at least can export to it (for example PostGIS&amp;#8217;s &lt;code&gt;ST_AsGeoJSON&lt;/code&gt; function). For considering the tools below, we&amp;#8217;ll assume you&amp;#8217;ve generated some GeoJSON data through some other process and need a simple way to visualize it.&lt;/p&gt;
&lt;p&gt;You&amp;#8217;ll notice that many of the tools listed below come from the fine folks at &lt;a href=&quot;https://www.mapbox.com/help/add-points-pt-1/&quot;&gt;Mapbox&lt;/a&gt;. Mapbox has become a standard bearer of open mapping tools over the last several years, so big thanks to them for providing so many useful tools to the community!&lt;/p&gt;
&lt;h2&gt;1. GitHub Gists&lt;/h2&gt;
&lt;p&gt;GitHub&amp;#8217;s document hosting platform is packed with features, including the ability to render uploaded GeoJSON data on a map. This Gist feature isn&amp;#8217;t that well known, but it can be pretty handy and makes it easy to share small amounts of GeoJSON on a map.&lt;/p&gt;
&lt;p&gt;Simply upload a file within a Gist ending in &lt;code&gt;.geojson&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/public/images/GeoJSONGist.png&quot;&gt;&lt;img src=&quot;/public/images/GeoJSONGist.png&quot; alt=&quot;/public/images/GeoJSONGist.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And Github will render it for you on a map: &lt;a href=&quot;https://gist.github.com/worace/540d89a5dbaa0b6274cd19f6ab6d4994&quot;&gt;https://gist.github.com/worace/540d89a5dbaa0b6274cd19f6ab6d4994&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can read more about mapping with Github Gists and the styling properties supported in their &lt;a href=&quot;https://help.github.com/articles/mapping-geojson-files-on-github/&quot;&gt;blog post&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Customizing Styling with Properties&lt;/h4&gt;
&lt;p&gt;You can control how Gist styles your map by setting certain attributes within the &lt;code&gt;properties&lt;/code&gt; of your GeoJSON features.&lt;/p&gt;
&lt;p&gt;For example uploading a GeoJSON Point with a &lt;code&gt;marker-color&lt;/code&gt; property sets the color of that pin on the map:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Feature&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;marker-color&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;#ff0000&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;geometry&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Point&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;coordinates&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;mf&quot;&gt;-118.4184041619301&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;mf&quot;&gt;34.05771049652868&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;/public/images/marker.png&quot;&gt;&lt;img src=&quot;/public/images/marker.png&quot; alt=&quot;/public/images/marker.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Read more about the supported styling properties &lt;a href=&quot;https://help.github.com/articles/mapping-geojson-files-on-github/#styling-features&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Posting with the &amp;#8220;gist&amp;#8221; CLI&lt;/h4&gt;
&lt;p&gt;Sometimes it can be handy to create a gist from the command line (for example if you want to avoid copying and pasting a large file, or are generating data from a shell pipeline).&lt;/p&gt;
&lt;p&gt;Gists can be created in this way using the &lt;a href=&quot;https://github.com/defunkt/gist&quot;&gt;Gist CLI&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gem install gist
cat /my/geo/data.geojson &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; gist -f my_file.geojson
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default gists created using the CLI are public and anonymous, so be sure to &lt;a href=&quot;https://github.com/defunkt/gist#login&quot;&gt;Log In&lt;/a&gt; if you want to create gists on your own account.&lt;/p&gt;
&lt;h2&gt;2. geojson.io&lt;/h2&gt;
&lt;p&gt;Next on the list is Mapbox&amp;#8217;s &lt;a href=&quot;http://geojson.io&quot;&gt;geojson.io&lt;/a&gt;. The software behind this tool is actually open source (&lt;a href=&quot;https://github.com/mapbox/geojson.io&quot;&gt;repo here&lt;/a&gt;), but Mapbox hosts an instance of it as a service to the community.&lt;/p&gt;
&lt;p&gt;At its core geojson.io is a big text box where you can paste geojson data and have it rendered on the adjacent map.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/public/images/geojsonio.png&quot;&gt;&lt;img src=&quot;/public/images/geojsonio.png&quot; alt=&quot;/public/images/geojsonio.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However it also includes some tools for adding and editing shapes, and can export to a variety of other geo formats or to Github Gists or b.locks.org for hosting a more permanent version of a map.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a great tool for quickly checking things out or iterating on some geodata pipeline.&lt;/p&gt;
&lt;h2&gt;3. Mapbox Studio&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;/public/images/studio_dataset.png&quot;&gt;&lt;img src=&quot;/public/images/studio_dataset.png&quot; alt=&quot;/public/images/studio_dataset.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Gists and geojson.io can take you pretty far for simple visualizations, but they both degrade in performance as the size of your data gets larger.&lt;/p&gt;
&lt;p&gt;GeoJSON is convenient because it&amp;#8217;s implemented as a subset of JSON, the web&amp;#8217;s data lingua franca. But it&amp;#8217;s not especially efficient, and copy-pasting large blobs of it between browser text boxes or other web tools can quickly bring things to a crawl.&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t have any hard or measured limits on this, but in my experience anything above a couple megabytes starts to feel pretty sluggish in gist or geojson.io (and github gists seems to have trouble editing files this large, causing your data to get garbled on subsequent updates).&lt;/p&gt;
&lt;p&gt;For datasets in this size range, &lt;a href=&quot;https://www.mapbox.com/mapbox-studio/&quot;&gt;Mapbox Studio&lt;/a&gt; becomes more attractive.&lt;/p&gt;
&lt;p&gt;Studio is really a full-featured cartographic toolkit, and boasts a lot of cool features which are beyond the scope of this overview. But for now we&amp;#8217;re focused on the ability to create &lt;i&gt;datasets&lt;/i&gt; by uploading GeoJSON files.&lt;/p&gt;
&lt;p&gt;Internally, Mapbox will convert your GeoJSON dataset into their own, more efficient, &lt;a href=&quot;https://www.mapbox.com/vector-tiles/&quot;&gt;Vector Tile&lt;/a&gt; format. This process takes a bit more work than simply pasting some GeoJSON into a text box on another webpage, but it means you&amp;#8217;ll be able to view much larger datasets more efficiently. If you&amp;#8217;re interested, you can also use Mapbox Studio to customize the styling of layers in your map as well.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/public/images/new_dataset.png&quot;&gt;&lt;img src=&quot;/public/images/new_dataset.png&quot; alt=&quot;/public/images/new_dataset.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Creating datasets and tilesets in Mapbox Studio is not difficult, but does involve a few steps, so for detailed instructions follow &lt;a href=&quot;https://www.mapbox.com/help/add-points-pt-1/&quot;&gt;Mapbox&amp;#8217;s detailed tutorial.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once you&amp;#8217;ve uploaded data for a dataset and converted your dataset to a tileset, you&amp;#8217;ll be able to add it to a new Mapbox &lt;i&gt;style&lt;/i&gt;, which can be used to generate a custom map using the MapboxGL SDK.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/public/images/studio_style.png&quot;&gt;&lt;img src=&quot;/public/images/studio_style.png&quot; alt=&quot;/public/images/studio_style.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;4. MapboxGL&lt;/h2&gt;
&lt;p&gt;Last on the list is the heaviest hitter, &lt;a href=&quot;https://www.mapbox.com/mapbox-gl-js/api/&quot;&gt;MapboxGL&lt;/a&gt; (specifically the JS API). This is Mapbox&amp;#8217;s full-featured mapping SDK, on which most of their other visualization tools (like Mapbox Studio) are built. It exposes a detailed API for creating maps with code, giving developers the power to create heavily customized and interactive map applications.&lt;/p&gt;
&lt;p&gt;Of course, with greater power and flexibility comes a steeper learning curve, so a few things to mention:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Creating a map with the Mapbox SDK requires writing some code, even for simple examples&lt;/li&gt;
  &lt;li&gt;The SDK is fairly complex, and learning all its features in detail can take some time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are lots of great tutorials on the web about working with mapboxgl-js, so I won&amp;#8217;t attempt to provide a detailed tutorial here, but I will briefly touch on a few of the key concepts that I found helpful when I started working with mapboxgl-js.&lt;/p&gt;
&lt;h3&gt;Sources &amp;amp; Layers&lt;/h3&gt;
&lt;p&gt;A &lt;code&gt;source&lt;/code&gt; in mapboxGL represent collections of geodata. This can be static data that is hardcoded into your application, or something more dynamic, like collections of points or polygons fetched from an API server you control.&lt;/p&gt;
&lt;p&gt;There are a few different types of sources, but I most frequently use the &lt;a href=&quot;https://www.mapbox.com/mapbox-gl-js/api/#geojsonsource&quot;&gt;GeoJSONSource&lt;/a&gt;, and that&amp;#8217;s what we&amp;#8217;ll look at in this example.&lt;/p&gt;
&lt;p&gt;Once you&amp;#8217;ve added a data source to your map, you can then add &lt;code&gt;layers&lt;/code&gt; which render that data in some way. For example if you&amp;#8217;ve added some polygons to your map you might add a &lt;code&gt;fill&lt;/code&gt; layer to color them in on the map.&lt;/p&gt;
&lt;p&gt;Layers are meant to be composed fairly atomically, so if you want your polygons to be shaded as well as outlined, you will need to add 2 layers: one &lt;code&gt;fill&lt;/code&gt; layer for the shading and another &lt;code&gt;line&lt;/code&gt; layer for the outline stroke. This took me a little while to get used to but it gives you a lot of power and flexibility to style a map as you want.&lt;/p&gt;
&lt;h3&gt;Hello World Example&lt;/h3&gt;
&lt;p&gt;Mapbox has tons of great examples on their documentation site, so you should &lt;a href=&quot;https://www.mapbox.com/mapbox-gl-js/example/simple-map/&quot;&gt;start there&lt;/a&gt; if you&amp;#8217;re looking for a specific use case. But here&amp;#8217;s a short example of a basic &amp;#8220;hello world&amp;#8221; map display with a source and a layer:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/worace/pen/oEVxzv&quot;&gt;(View the example on Codepen)&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Display a map&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;viewport&amp;#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;initial-scale=1,maximum-scale=1,user-scalable=no&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.js&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.css&amp;#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;stylesheet&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;map&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// You should get your own access token by signing up for a free account at https://www.mapbox.com/&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;mapboxgl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accessToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;pk.eyJ1Ijoid29yYWNlIiwiYSI6ImNpeWMxOW1jcjAwYWUyd294ZzQ0YnMyZ3QifQ.ZaWekMcNTGFN-TmpPkf9AA&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapboxgl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;map&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// container id&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;mapbox://styles/mapbox/streets-v9&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// also try dark-v9 or light-v9&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;118.4184041619301&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;34.05771049652868&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// starting position [lng, lat]&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// starting zoom&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;FeatureCollection&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;features&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Feature&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;point_source&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;user_upload&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;geometry&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Point&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;coordinates&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;118.4184041619301&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;34.05771049652868&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Feature&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;point_source&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;admin_upload&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;geometry&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Point&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;coordinates&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;118.4185041619301&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;34.05771249652868&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Wait for map to fully load before trying to add data&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;load&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;some-points&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;geojson&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;point-circles&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;circle&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;source&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;some-points&amp;#39;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Matches the ID we gave to our source above&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should give you a simple map with 2 points:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/public/images/points_raw.png&quot;&gt;&lt;img src=&quot;/public/images/points_raw.png&quot; alt=&quot;/public/images/points_raw.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Data-Driven Styling&lt;/h3&gt;
&lt;p&gt;MapboxGL is meant for creating maps programmatically on top of dynamic data &amp;#8211; if you just have a small amount of static data to view ad-hoc, one of the other tools mentioned above is probably a better fit.&lt;/p&gt;
&lt;p&gt;To this end, it also provides ways to customize the styling of different map elements based on their metadata (&lt;code&gt;properties&lt;/code&gt; in a GeoJSON object).&lt;/p&gt;
&lt;p&gt;A GeoJSON &lt;code&gt;feature&lt;/code&gt; consists of a &lt;code&gt;geometry&lt;/code&gt; &amp;#8211; a point, polygon, linestring, etc &amp;#8211; and a JSON Object of arbitrary &lt;code&gt;properties&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Feature&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;point_source&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;user_upload&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;geometry&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Point&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;coordinates&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;mf&quot;&gt;-118.4184041619301&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;mf&quot;&gt;34.05771049652868&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;GeoJSON &lt;code&gt;properties&lt;/code&gt; are arbitrary &amp;#8211; you can use them to store whatever metadata is relevant to your application.&lt;/p&gt;
&lt;p&gt;A common mapping use-case, then, would be to customize the styling of this point based on an attribute of these properties. Mapbox calls this &amp;#8220;data-driven styling.&amp;#8221; In our example above we included a property of &lt;code&gt;point_source&lt;/code&gt; on each of our points. Here&amp;#8217;s how we would change the layer to style the circle color based on that attribute:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;point-circles&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;circle&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&amp;#39;source&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;some-points&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&amp;#39;paint&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;circle-color&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&amp;#39;match&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;get&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;point_source&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&amp;#39;user_uploaded&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;#ff0000&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&amp;#39;#0000ff&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that the second point has the value &lt;code&gt;admin_upload&lt;/code&gt;, which doesn&amp;#8217;t have a color explicitly specified, so it gets the default value of &lt;code&gt;#0000ff&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/public/images/points_styled.png&quot;&gt;&lt;img src=&quot;/public/images/points_styled.png&quot; alt=&quot;/public/images/points_styled.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Wrapup&lt;/h3&gt;
&lt;p&gt;This brief overview only scratches the surface of all you can do with MapboxGL. It&amp;#8217;s a complex library and takes some time to master, but it&amp;#8217;s the best developer tool out there for creating complex mapping applications.&lt;/p&gt;
&lt;p&gt;As always, check out &lt;a href=&quot;https://www.mapbox.com/mapbox-gl-js/api/&quot;&gt;their documentation&lt;/a&gt; and &lt;a href=&quot;https://www.mapbox.com/mapbox-gl-js/example/&quot;&gt;examples&lt;/a&gt; for more info.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Good Enough Clojure Setup for Beginners</title>
   <link href="http://worace.works/2016/06/14/good-enough-clojure-setup/"/>
   <updated>2016-06-14T00:00:00-07:00</updated>
   <id>http://worace.works/2016/06/14/good-enough-clojure-setup</id>
   <content type="html">&lt;p&gt;This document will go over a simple but effective Clojure setup aimed at beginners, and especially those used to editing Ruby, Javascript, or other dynamic languages using Atom.&lt;/p&gt;
&lt;h2&gt;The Basics &amp;#8211; JDK and Leiningen&lt;/h2&gt;
&lt;p&gt;If you&amp;#8217;re brand new to Clojure you&amp;#8217;re in luck, since it&amp;#8217;s pretty easy to install. Clojure is built to run on the JVM (Clojure the language is technically just a Java library). The JVM is incredibly ubiquitous, and thanks to this it&amp;#8217;s pretty easy to get Clojure up and running on most machines. Try the following steps:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Do you have JDK version 1.6+ installed?
    &lt;ul&gt;
      &lt;li&gt;Check by running &lt;code&gt;java -version&lt;/code&gt; &amp;#8211; Hope for something like &lt;code&gt;java version 1.8.0_65&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;If not, &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;install Java by following the instructions here.&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Install &lt;a href=&quot;http://leiningen.org/&quot;&gt;Leiningen, a Clojure build tool.&lt;/a&gt; Leiningen gives us some tools for managing Clojure dependencies and running projects or other tasks &amp;#8211; it&amp;#8217;s somewhat analagous to a combination of Bundler and Rake from the Ruby world. On OS X it&amp;#8217;s easy to unstall using Homebrew: &lt;code&gt;brew install leiningen&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Verify it&amp;#8217;s all working &amp;#8211; You should now be able to run the command &lt;code&gt;lein repl&lt;/code&gt; to boot a Clojure REPL.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/public/images/LeinRepl.png&quot; alt=&quot;/public/images/LeinRepl.png&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Text Editor: Atom&lt;/h2&gt;
&lt;p&gt;Atom may not be the first editor that comes to mind for doing Clojure development, but thanks to its rapidly growing package ecosystem, it&amp;#8217;s actually possible to put together a pretty solid Clojure dev environment on top of Atom.&lt;/p&gt;
&lt;p&gt;More sophisticated editors like Emacs or Cursive may be more popular for developers doing full-time Clojure work in industry, but the additional features and configuration are often distracting for beginners and are overkill for what we want to do anyway.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s look at a few packages that make working with Clojure much nicer in Atom&lt;/p&gt;
&lt;h3&gt;Language: Clojure&lt;/h3&gt;
&lt;p&gt;The first stop is the &lt;a href=&quot;https://github.com/atom/language-clojure&quot;&gt;language-clojure&lt;/a&gt; package &amp;#8211; this will give us basic syntax highlighting for Clojure source files. There isn&amp;#8217;t much to this package from a usage standpoint &amp;#8211; install it via the atom package manager and it will just work.&lt;/p&gt;
&lt;p&gt;Syntax Highlighting!
  &lt;img src=&quot;/public/images/ClojureSyntaxHighlighting.png&quot; alt=&quot;/public/images/ClojureSyntaxHighlighting.png&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;Proto Repl&lt;/h3&gt;
&lt;p&gt;A REPL is fairly indispensable for doing Clojure development. Clojure developers tend to emphasize a very interactive workflow &amp;#8211; boot your REPL, experiment in it, push some code to it from your editor, then apply the insights you gain from these experiments to improving your code.&lt;/p&gt;
&lt;p&gt;The REPL also gives us a convenient way to run tests, to read documentation (thanks to Clojure&amp;#8217;s built-in doc string feature) &amp;#8211; we can even use it to boot long-running processes like a webserver.&lt;/p&gt;
&lt;p&gt;But enough REPL preaching &amp;#8211; how do we get one? For a long time this was the biggest blocker to having a productive Clojure experience in Atom &amp;#8211; there just wasn&amp;#8217;t a great option for interactive REPL-driven development.&lt;/p&gt;
&lt;p&gt;Fortunately in October, 2015 the popular &lt;a href=&quot;https://github.com/jasongilman/proto-repl&quot;&gt;proto-repl&lt;/a&gt; package came out and brought with it a pretty darn good REPL setup for Atom. Proto-repl feels a little different at first from other REPLs you may have used in other languages, but it doesn&amp;#8217;t take long to get comfortable with it.&lt;/p&gt;
&lt;p&gt;Install the package using APM and go ahead and open the REPL either using the &amp;#8220;proto-repl&amp;#8221; entries under the Packages menu, or using the shortcut &lt;code&gt;Cmd-Option-L&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The REPL will take a second to boot, but once it does, play around with it by evaluating some Clojure code (use &lt;code&gt;Shift-Enter&lt;/code&gt; to submit code you type at the bottom of the REPL buffer).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/public/images/ProtoReplUsage.png&quot; alt=&quot;/public/images/ProtoReplUsage.png&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;CMD-Option-L&lt;/code&gt;: Start the REPL&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Shift-Enter&lt;/code&gt;: Submit form in REPL&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Up / Down Arrows&lt;/code&gt;: Navigate REPL history&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Cmd-Option-a&lt;/code&gt;: Run all tests in current project&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Cmd-Option s&lt;/code&gt;: Send a highlighted selection of code to the REPL&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Ctrl-Shift-c&lt;/code&gt;: Interrupt (e.g. if you accidentally make an infinite loop in the REPL)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Cmd-Option-r&lt;/code&gt;: Refresh namespaces (reload files in the current project into the repl &amp;#8211;  great for evaluating some new functions or other expressions you have written in a file into the REPL so you can play around with them there)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, if you&amp;#8217;d like to set up Proto-Repl to behave more like a traditional terminal, try adding the following keybindings to your Keymap:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;#39;atom-pane[data-active-item-name=&amp;quot;Clojure REPL&amp;quot;] atom-text-editor:not([mini])&amp;#39;:
  &amp;#39;enter&amp;#39;:&amp;#39;proto-repl:execute-text-entered-in-repl&amp;#39;
  &amp;#39;cmd-k&amp;#39;:&amp;#39;proto-repl:clear-repl&amp;#39;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will let us submit code to the REPL with ENTER rather than Shift-Enter, and also let us use Cmd-K to clear the REPL screen.&lt;/p&gt;
&lt;p&gt;This handful of keybindings above should give you enough tools to get started working interactively with Clojure code. Proto-Repl has quite a few neat features tucked into it, so once you get comfortable with the basics you should also check out &lt;a href=&quot;https://atom.io/packages/proto-repl&quot;&gt;proto-repl&amp;#8217;s documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Parinfer&lt;/h3&gt;
&lt;p&gt;Newcomers often find working with Lisp code challenging, especially coming from more &amp;#8220;traditional&amp;#8221; Algol-inspired languages. The difficulty is that Lisp really wants to be edited &lt;i&gt;structurally&lt;/i&gt; rather than &lt;i&gt;textually&lt;/i&gt;.&lt;/p&gt;
&lt;p&gt;A Lisp program is really just a Tree of &lt;a href=&quot;https://en.wikipedia.org/wiki/S-expression&quot;&gt;expressions&lt;/a&gt;, and when we work with Lisp code we frequently want to manipulate the structure of this tree &amp;#8211; Move this expression Up a level, combine this expression with the one next to it, remove this expression from the tree entirely, etc.&lt;/p&gt;
&lt;p&gt;Sounds good, but it&amp;#8217;s complicated by ((((all) ((those) (((((parentheses))))))))) &amp;#8211; it&amp;#8217;s frustratingly easy when moving some Lisp code around to accidentally drop a parenthesis, add an extra one, or just leave one in the wrong spot.&lt;/p&gt;
&lt;p&gt;Over time developers have written tools to help manage this process. &lt;a href=&quot;https://www.emacswiki.org/emacs/ParEdit&quot;&gt;ParEdit&lt;/a&gt; is perhaps the most famous &amp;#8211; it&amp;#8217;s a popular Emacs package for manipulating parenthesis-based S-expressions in a structural way. It&amp;#8217;s a powerful tool but like many things in Emacs it comes with a learning curve.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s why I&amp;#8217;m excited by Parinfer - a tool that attempts to give a more &amp;#8220;intuitive&amp;#8221; or &amp;#8220;Just Do What I Mean&amp;#8221; approach to structural Lisp editing. The &lt;a href=&quot;https://shaunlebron.github.io/parinfer/&quot;&gt;docs on Parinfer&amp;#8217;s homepage&lt;/a&gt; do a better job of explaining the tool than I will, but the gist of it is &lt;i&gt;inferring&lt;/i&gt; Lisp structures based on the indentation of a chunk of code.&lt;/p&gt;
&lt;p&gt;As you edit code, Parinfer will attempt to guess the most sensible S-expression structure you intended based on the indentation and spacing you typed in the code. For example removing the indentation of a nested expression might be interpreted as &amp;#8220;move that expression UP one level.&amp;#8221; The great thing about Parinfer is there&amp;#8217;s not too much to learn &amp;#8211; just type correctly formatted code and it will (mostly) do the right thing.&lt;/p&gt;
&lt;p&gt;Luckily for us there&amp;#8217;s a great Parinfer implementation for Atom:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Install the atom-parinfer package with APM: &lt;a href=&quot;https://github.com/oakmac/atom-parinfer&quot;&gt;https://github.com/oakmac/atom-parinfer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Play around with editing some Clojure code in your editor (make sure the file extension is set to &lt;code&gt;.clj&lt;/code&gt;) &amp;#8211; what happens when you type parentheses, indent them, or un-indent them?&lt;/li&gt;
  &lt;li&gt;Parinfer is pretty good at its job but every now and then you&amp;#8217;ll get into a sticky situation that needs to be sorted out manually. Don&amp;#8217;t forget you can use &lt;code&gt;Cmd-Shift-9&lt;/code&gt; to Toggle from &amp;#8220;Indent&amp;#8221; mode (what Parinfer normally does) to &amp;#8220;Paren&amp;#8221; mode (what we would do when just manipulating text in a more traditional editor)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Auto Testing: Lein Test Refresh&lt;/h2&gt;
&lt;p&gt;The last Clojure tool that I find truly essential is a test-runner package called &lt;a href=&quot;https://github.com/jakemcc/lein-test-refresh&quot;&gt;lein-test-refresh.&lt;/a&gt; It gives us an awesome &amp;#8220;run my tests when I save a file&amp;#8221; experience for Clojure.&lt;/p&gt;
&lt;p&gt;Test-refresh is a leiningen plugin, so the easiest way to install it is to add it to your system-wide &amp;#8220;user&amp;#8221; leiningen profile, which is defined in the configuration file at &lt;code&gt;~/.lein/profiles.clj&lt;/code&gt;. To include the plugin, add it to your leiningen configuration like so:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:plugins&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;com.jakemccrary/lein-test-refresh&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0.15.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Keep in mind that your &lt;code&gt;profiles.clj&lt;/code&gt; file just contains a Clojure (technically &lt;a href=&quot;https://github.com/edn-format/edn&quot;&gt;edn&lt;/a&gt;) data structure. If your &lt;code&gt;profiles.clj&lt;/code&gt; is empty, you can simply paste the above line into the file. If you already have the &lt;code&gt;:user&lt;/code&gt; and &lt;code&gt;:plugins&lt;/code&gt; entries defined, you&amp;#8217;ll need to add this new plugin vector (&lt;code&gt;[com.jakemccrary/lein-test-refresh &amp;quot;0.15.0&amp;quot;]&lt;/code&gt;) within the existing &lt;code&gt;:plugins&lt;/code&gt; list.&lt;/p&gt;
&lt;p&gt;With this plugin installed, you can now run &lt;code&gt;lein test-refresh&lt;/code&gt; within any directory containing a &lt;code&gt;project.clj&lt;/code&gt; file, and leiningen will watch for your files to be edited and then run the tests in response. It&amp;#8217;s a great way to get really quick feedback from our test suite when working with code.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/public/images/LeinTestRefresh.png&quot; alt=&quot;/public/images/LeinTestRefresh.png&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Getting Started with Emacs for Ruby</title>
   <link href="http://worace.works/2016/06/07/getting-started-with-emacs-for-ruby/"/>
   <updated>2016-06-07T00:00:00-07:00</updated>
   <id>http://worace.works/2016/06/07/getting-started-with-emacs-for-ruby</id>
   <content type="html">&lt;p&gt;Lately I&amp;#8217;ve been gradually drawing a few students at Turing into the Emacs fold. Along the way I&amp;#8217;ve been thinking about what is needed for a minimal but sufficient Emacs setup for working with Ruby code.&lt;/p&gt;
&lt;p&gt;In this post I&amp;#8217;ll try to document some of the tools and configuration I&amp;#8217;ve found useful, with an aim toward keeping things accessible for a newcomer to Emacs. The key features I&amp;#8217;ll focus on include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Modernizing the Emacs UI using some sane defaults&lt;/li&gt;
  &lt;li&gt;Setting up basic Ruby syntax highlighting and syntax completion&lt;/li&gt;
  &lt;li&gt;Interactively evaluating code in Ruby buffers using Seeing Is Believing&lt;/li&gt;
  &lt;li&gt;Running a Ruby REPL from within emacs using inf-ruby-mode&lt;/li&gt;
  &lt;li&gt;Running Ruby tests from within emacs using ruby-test-mode&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For now I won&amp;#8217;t be digging into any Rails-specific features &amp;#8211; hopefully I can cover this in another post, but this guide is focused on plain old Ruby.&lt;/p&gt;
&lt;h2&gt;Emacs Configuration 101&lt;/h2&gt;
&lt;p&gt;The Emacs configuration journey starts with a special directory on your machine located at &lt;code&gt;~/.emacs.d&lt;/code&gt;. When Emacs starts up, it will by default look for a file called &lt;code&gt;init.el&lt;/code&gt; in this directory and use that to load any user-specific configuration you want to provide. (This is similar to how your shell loads any user configuration files at &lt;code&gt;~/.profile&lt;/code&gt; or &lt;code&gt;~/.bashrc&lt;/code&gt;, etc)&lt;/p&gt;
&lt;p&gt;To follow along, go ahead and create this directory and file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir ~/.emacs.d
touch ~/.emacs.d/init.el
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If your machine already has an Emacs configuration in this directory and you want to start from scratch, it&amp;#8217;s safe to stash the existing directory by moving it:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mv ~/.emacs.d ~/.emacs.d.old
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Your original config will be waiting for you should you decide to return to it.&lt;/p&gt;
&lt;h3&gt;Baby&amp;#8217;s First Emacs Lisp&lt;/h3&gt;
&lt;p&gt;An astute reader will have noticed the extension of the init file we just created: &lt;code&gt;.el&lt;/code&gt;. This stands for Emacs Lisp, the language in which Emacs is written and scripted. It turns out Emacs is really a big old Lisp interpreter that happens to have some neat features for manipulating text buffers tucked away in the corners. So are you saying we&amp;#8217;ll be writing&amp;#8230; &lt;i&gt;Lisp&lt;/i&gt;? You bet your Free Software Foundation commemorative mousepad we are!&lt;/p&gt;
&lt;p&gt;When Emacs boots, it will process our &lt;code&gt;init.el&lt;/code&gt; as Emacs Lisp, so within this file we&amp;#8217;ll be writing Elisp expressions to customize how the editor behaves.&lt;/p&gt;
&lt;h2&gt;Emacs: Out of the 1990&amp;#8217;s&lt;/h2&gt;
&lt;p&gt;While there&amp;#8217;s a certain endearing homeliness to it, the first impression of a fresh Emacs install is fairly dated:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/public/images/emacs_splash_screen.png&quot; alt=&quot;/public/images/emacs_splash_screen.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The default Emacs configuration includes some clunky things like menu bars and a loud &amp;#8220;splash&amp;#8221; screen. &lt;a href=&quot;https://github.com/technomancy/better-defaults&quot;&gt;BetterDefaults&lt;/a&gt; is a popular Emacs package for improving this situation without getting too overboard with magical customizations.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s start by pulling BetterDefaults into our new config. This will also give us a good opportunity to talk about&amp;#8230;&lt;/p&gt;
&lt;h3&gt;Emacs Packages&lt;/h3&gt;
&lt;p&gt;A &amp;#8220;package&amp;#8221; is the standard unit for distributing a chunk of Emacs code. There are several free online package repositories out there, the most popular being &lt;a href=&quot;https://elpa.gnu.org/&quot;&gt;GNU ELPA&lt;/a&gt;, &lt;a href=&quot;https://www.emacswiki.org/emacs/ELPA&quot;&gt;ELPA&lt;/a&gt;, &lt;a href=&quot;https://marmalade-repo.org/&quot;&gt;Marmalade&lt;/a&gt;, and &lt;a href=&quot;https://melpa.org/&quot;&gt;Melpa&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, Emacs doesn&amp;#8217;t come with a built-in &amp;#8220;manifest&amp;#8221;-driven solution for defining what packages to use (like we might encounter with a Gemfile or package.json in a Ruby or Node project).&lt;/p&gt;
&lt;p&gt;Fortunately it&amp;#8217;s pretty easy to add this functionality, so go ahead and add this Elisp to your &lt;code&gt;init.el&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; list the repositories containing them&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package-archives&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;gnu&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;http://elpa.gnu.org/packages/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;melpa&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;https://melpa.org/packages/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; activate all the packages (in particular autoloads)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;package-initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; fetch the list of packages available&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package-archive-contents&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;package-refresh-contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; list the packages you want&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package-list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;better-defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; install the missing packages&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dolist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;package-installed-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;package-install&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;better-defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This first Elisp snippet defines a list of archives to use when searching for packages and then initializes the package system.&lt;/p&gt;
&lt;p&gt;Next we define a list of packages we want to install (so far just &lt;code&gt;better-defaults&lt;/code&gt;). Then we check to see if any of them are missing and, if so, install them. From now on, we can simply add packages to our &lt;code&gt;package-list&lt;/code&gt; and they should be automatically installed when we start Emacs &amp;#8211; similar to adding a new gem to your &lt;code&gt;Gemfile&lt;/code&gt; and running &lt;code&gt;bundle&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;require&lt;/code&gt; expression on the last line loads the better-defaults package that we just installed, so you should see it taking effect.&lt;/p&gt;
&lt;p&gt;Save this file and restart Emacs if it&amp;#8217;s already running (remember: &lt;code&gt;C-x C-c&lt;/code&gt; to quit), and you should see emacs pause briefly as it installs the Better Defaults package. You should also see a slightly cleaner interface now that the toolbars are removed.&lt;/p&gt;
&lt;h2&gt;A Bit More UI:&lt;/h2&gt;
&lt;p&gt;Next let&amp;#8217;s get rid of the default Emacs splash screen and have it put us into an empty buffer instead. The &lt;code&gt;initial-major-mode&lt;/code&gt; setting can take any of Emacs&amp;#8217; major modes &amp;#8211; a lot of people use Org or Markdown mode for their scratch buffer, but since we&amp;#8217;re targeting a Ruby setup here, we&amp;#8217;ll use that.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;inhibit-splash-screen&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;initial-scratch-message&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;initial-major-mode&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ruby-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Additionally, it would be nice if it didn&amp;#8217;t look so glaringly white. Let&amp;#8217;s update our package list to pull in the ever-gentle-on-the-eyes &lt;a href=&quot;https://github.com/bbatsov/solarized-emacs&quot;&gt;Solarized Theme&lt;/a&gt; and load it in our init file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package-list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;better-defaults&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;solarized-theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;;....&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load-theme&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;solarized-dark&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, we add a few more bits of snazz like showing line numbers and setting a default font (&lt;a href=&quot;https://github.com/adobe-fonts/source-code-pro&quot;&gt;SourceCodePro&lt;/a&gt; is a free, open source monospaced font for editing code from Adobe.)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; Show line numbers&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;global-linum-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;;; Typography&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set-face-attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;default&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt;
                    &lt;span class=&quot;nv&quot;&gt;:family&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Source Code Pro&amp;quot;&lt;/span&gt;
                    &lt;span class=&quot;nv&quot;&gt;:height&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;
                    &lt;span class=&quot;nv&quot;&gt;:weight&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;normal&lt;/span&gt;
                    &lt;span class=&quot;nv&quot;&gt;:width&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;OS X Conveniences&lt;/h2&gt;
&lt;p&gt;I generally recommend people start out using Emacs in GUI mode (as opposed to the text-based terminal interface). Personally I still use this mode most often even a few years into using Emacs, but when starting out it&amp;#8217;s especially helpful to have some of the familiar OS X keybindings for Copying, Pasting, Cmd-Tabbing, etc. On a Mac you&amp;#8217;ll have this available if you installed using homebrew with the &lt;code&gt;--with-cocoa&lt;/code&gt; flag (&lt;code&gt;brew install emacs --with-cocoa&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s also convenient to be able to open your editor from the command line and pass it a file or directory to start with. To make this easy, you can add this function to your shell profile (&lt;code&gt;~/.bashrc&lt;/code&gt;, &lt;code&gt;~/.bash_profile&lt;/code&gt;, etc):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;em &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  open -a /usr/local/Cellar/emacs/24.5/Emacs.app/Contents/MacOS/Emacs &lt;span class=&quot;nv&quot;&gt;$*&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then from the command line you&amp;#8217;ll be able to do things like &lt;code&gt;em pizza.el&lt;/code&gt; to open that file in an Emacs Cocoa app window.&lt;/p&gt;
&lt;h2&gt;Editor Basics: Find-In-Project and Ctrl-P&lt;/h2&gt;
&lt;p&gt;Next let&amp;#8217;s try to check off a couple more features from the &amp;#8220;What would I miss if I started using Emacs from Atom/SublimeText/TextMate?&amp;#8221; list. The 2 of these I find most essential are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&amp;#8220;Ctrl-P&amp;#8221; or &amp;#8220;Cmd-T&amp;#8221;-style command to fuzzily open a file in the current project&lt;/li&gt;
  &lt;li&gt;Find-in-Project text search for finding an arbitrary string in the current project&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can get these features pretty easily using 3 popular packages: &lt;a href=&quot;https://github.com/emacs-helm/helm&quot;&gt;Helm&lt;/a&gt;, &lt;a href=&quot;https://github.com/bbatsov/helm-projectile&quot;&gt;Helm Projectile&lt;/a&gt; and &lt;a href=&quot;https://github.com/syohex/emacs-helm-ag&quot;&gt;Helm ag&lt;/a&gt;. Helm is actually something of a &amp;#8220;parent&amp;#8221; package for these other 2 &amp;#8211; it provides a generalized framework for doing the kind of slick &amp;#8220;fuzzily-search some text in a list of stuff&amp;#8221; interface that we all know and love. Then other packages like Helm Projectile and Helm ag can take advantage of this interaction to build neat tools like &amp;#8220;find a file in my project&amp;#8221; or &amp;#8220;find some text in my project.&amp;#8221;&lt;/p&gt;
&lt;p&gt;Add these to your &lt;code&gt;package-list&lt;/code&gt; and give them some basic keybindings as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package-list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;better-defaults&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;solarized-theme&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-projectile&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-ag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;M-x&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;helm-M-x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;s-f&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;helm-projectile-ag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;s-t&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;helm-projectile-find-file-dwim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;s&lt;/code&gt; in the keybinds here stands for the &amp;#8220;Super&amp;#8221; modifier, which in the OS X Cocoa app should be your &lt;code&gt;CMD&lt;/code&gt; Key. (The other modifier shortcuts we&amp;#8217;ll be seing include &lt;code&gt;C-&lt;/code&gt; for Control, &lt;code&gt;M-&lt;/code&gt; for Meta or Option, and &lt;code&gt;S-&lt;/code&gt; for shift).&lt;/p&gt;
&lt;p&gt;These bindings give us the familiar &lt;code&gt;Cmd-f&lt;/code&gt; for &amp;#8220;search for text in this project&amp;#8221; and &lt;code&gt;Cmd-t&lt;/code&gt; for &amp;#8220;find files in my project.&amp;#8221; Finally we also over-write the default &lt;code&gt;M-x&lt;/code&gt; keybinding to use helm&amp;#8217;s interface for searching for Emacs commands to run. Now when we need to look for a less familiar Emacs interactive command, the Helm interface will help us by fuzzily searching and narrowing among the available commands.&lt;/p&gt;
&lt;h2&gt;Ruby Basics: Highlighting and Auto-matching&lt;/h2&gt;
&lt;p&gt;Now that we&amp;#8217;ve tamed Emacs into a slightly more well-behaved general editing environment, we can dive into our Ruby setup!&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s start with a bit of basic auto-matching for paired characters (parens, quotes, def/class/if-end, etc). Add &lt;code&gt;ruby-electric&lt;/code&gt; to your package list and tell emacs to require it automatically whenever we enter ruby mode like so:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package-list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;better-defaults&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;solarized-theme&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-projectile&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-ag&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;ruby-electric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;;...&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;;; Autoclose paired syntax elements like parens, quotes, etc&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ruby-mode-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ruby-electric-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sometimes Ruby code appears in other kinds of files that don&amp;#8217;t end with the standard &lt;code&gt;.rb&lt;/code&gt; extension. We can tell emacs to treat these as ruby files using this snippet:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add-to-list&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;auto-mode-alist&lt;/span&gt;
             &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\.\\(?:cap\\|gemspec\\|irbrc\\|gemrc\\|rake\\|rb\\|ru\\|thor\\)\\&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ruby-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add-to-list&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;auto-mode-alist&lt;/span&gt;
             &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\(?:Brewfile\\|Capfile\\|Gemfile\\(?:\\.[a-zA-Z0-9._-]+\\)?\\|[rR]akefile\\)\\&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ruby-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Ruby Version Manager&lt;/h2&gt;
&lt;p&gt;Most Ruby developers these days are using some kind of Version Manager to simplify the process of installing and jumping around between various ruby versions. This is a great feature to have, but it unfortunately adds another layer of indirection between Emacs and the Ruby installation living on our machine.&lt;/p&gt;
&lt;p&gt;To further complicate things, the community hasn&amp;#8217;t really standardized on any of the particular options, which means you&amp;#8217;re likely using one of Rbenv, RVM, or Chruby. Depending on which of these you&amp;#8217;re using, you&amp;#8217;ll want to pull in the appropriate config below:&lt;/p&gt;
&lt;h3&gt;RVM (Using &lt;a href=&quot;https://github.com/senny/rvm.el&quot;&gt;rvm.el&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;Add the &lt;code&gt;rvm&lt;/code&gt; package and invoke it using &lt;code&gt;(rvm-use-default)&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package-list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;better-defaults&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;solarized-theme&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-projectile&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-ag&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;ruby-electric&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;...&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rvm-use-default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;RBENV (using &lt;a href=&quot;https://github.com/senny/rbenv.el&quot;&gt;rbenv.el&lt;/a&gt; )&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package-list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;better-defaults&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;solarized-theme&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-projectile&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-ag&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;ruby-electric&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;rbenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;...&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;global-rbenv-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rbenv-use-global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;;; Optional -- if your RBENV installation is located somewhere besides&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; ~/.rbenv, you will need to configure this:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;;(setq rbenv-installation-dir &amp;quot;/usr/local/rbenv&amp;quot;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Chruby (using &lt;a href=&quot;https://github.com/plexus/chruby.el&quot;&gt;chruby.el&lt;/a&gt;)&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package-list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;better-defaults&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;solarized-theme&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-projectile&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-ag&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;ruby-electric&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;chruby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;...&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chruby&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;2.2.2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;;;  or whichever version you want to use&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Ruby Interactions: The Once and Future Workflow&lt;/h2&gt;
&lt;p&gt;Now that we have the groundwork out of the way we can tackle the good stuff. In this section we&amp;#8217;ll look at several tools for working interactively with Ruby code from within Emacs.&lt;/p&gt;
&lt;p&gt;Emacs comes from a rich history of interactive, REPL-driven Lisp development environments. Combined with being deeply programmable (thanks to Emacs Lisp), this makes it ideal for creating a smoothly interactive development environment. We want to reduce the time and effort required to get feedback from running our code as much as possible, and Emacs can help accomplish this.&lt;/p&gt;
&lt;p&gt;In the context of Ruby code, I specifically want to be able to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Arbitrarily evaluate Ruby code from the current buffer&lt;/li&gt;
  &lt;li&gt;Open an interactive ruby session (i.e. REPL &amp;#8211; IRB or Pry) within Emacs&lt;/li&gt;
  &lt;li&gt;Run tests from within Emacs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;#8217;s check out some neat Emacs packages that make interactions like these possible.&lt;/p&gt;
&lt;h3&gt;Ruby Buffer Interaction &amp;#8211; Seeing truly is believing&lt;/h3&gt;
&lt;p&gt;First, install the Gem:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gem install seeing_is_believing --version &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;.0.0.beta.7
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, add and configure the corresponding Emacs package:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package-list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;better-defaults&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;solarized-theme&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-projectile&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-ag&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;ruby-electric&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;seeing-is-believing&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;chruby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;;; ...&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;seeing-is-believing-prefix&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ruby-mode-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;seeing-is-believing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;seeing-is-believing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Restart Emacs and open up a sample Ruby file. Try experimenting with the following keybindings to see what Seeing Is Believing gives us:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;C-. s&lt;/code&gt; - Run Seeing is Believing for the entire file&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-. c&lt;/code&gt; - Clear the Seeing is Believing output&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-. t&lt;/code&gt; - Tag a line to be &amp;#8220;targeted&amp;#8221; for evaluation by SiB&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;C-. x&lt;/code&gt; - Run only the &amp;#8220;tagged&amp;#8221; lines (those with trailing &amp;#8220;# =&amp;gt; &amp;#8221; markers)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hopefully you&amp;#8217;re seeing some output show up at the end of your Ruby source lines. Seeing is Believing is a Gem that runs a chunk of Ruby code and prints out (in an existing text buffer) the result of evaluating each line. For our purposes, this gives us a very powerful way to quickly interact with a chunk of code &amp;#8211; directly from our Emacs buffer!&lt;/p&gt;
&lt;p&gt;To learn more, check out the docs for the &lt;a href=&quot;https://github.com/JoshCheek/seeing_is_believing&quot;&gt;Seeing Is Believing Gem&lt;/a&gt; and &lt;a href=&quot;https://github.com/jcinnamond/seeing-is-believing&quot;&gt;seeing-is-believing.el&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;inf-ruby &amp;#8211; IRB from Emacs&lt;/h3&gt;
&lt;p&gt;Next stop is a neat package called &lt;a href=&quot;https://github.com/nonsequitur/inf-ruby&quot;&gt;inf-ruby&lt;/a&gt;. In the tradition of other Emacs Inferior Language Modes, it gives us an embedded IRB process running inside of Emacs, as well as some standard keybindings to interact with the REPL by sending code snippets to it from a buffer.&lt;/p&gt;
&lt;p&gt;First, install and configure inf-ruby:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package-list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;better-defaults&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;solarized-theme&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-projectile&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-ag&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;ruby-electric&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;seeing-is-believing&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;chruby&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;inf-ruby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;autoload&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;inf-ruby-minor-mode&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;inf-ruby&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Run an inferior Ruby process&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ruby-mode-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;inf-ruby-minor-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Restart Emacs then open up a Ruby file somewhere. Try out the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use &lt;code&gt;C-c C-s&lt;/code&gt; to launch the inf-ruby process.&lt;/li&gt;
  &lt;li&gt;Use &lt;code&gt;C-x o&lt;/code&gt; to switch to the inf-ruby pane and try running some random ruby snippets as you normally would from IRB or pry.&lt;/li&gt;
  &lt;li&gt;Go back to your Ruby buffer, select (by highlighting) a chunk of code, and use &lt;code&gt;C-c C-r&lt;/code&gt; to &lt;b&gt;push&lt;/b&gt; that Ruby code into the IRB session.&lt;/li&gt;
  &lt;li&gt;For example, try defining a class in your Ruby buffer, select the whole buffer, run &lt;code&gt;C-c C-r&lt;/code&gt;, then swap over to the inf-ruby buffer and instantiate an instance of your class. Pretty cool!&lt;/li&gt;
  &lt;li&gt;Alternatively, use &lt;code&gt;C-c M-r&lt;/code&gt; to run a selected chunk of code and automatically go to the ruby buffer&lt;/li&gt;
  &lt;li&gt;Finally, use &lt;code&gt;helm-M-x&lt;/code&gt; (which we bound earlier to the default &lt;code&gt;M-x&lt;/code&gt; keybinding) to search for &amp;#8220;ruby send&amp;#8221; and see what other default bindings inf-ruby gives us.&lt;/li&gt;
  &lt;li&gt;If you do a lot of work in Rails or Sinatra, check out the commands &lt;code&gt;inf-ruby-console-rails&lt;/code&gt; and &lt;code&gt;inf-ruby-console-racksh&lt;/code&gt;. Using these commands inf-ruby can start a console session in the environment of your web project.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Ruby TDD &amp;#8211; &lt;a href=&quot;https://github.com/r0man/ruby-test-mode&quot;&gt;ruby-test-mode.el&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now for the last item on our interactive workflow checklist &amp;#8211; running tests from Emacs. At its core, TDD is about incorporating more feedback into our development workflow. To take full advantage of this, we want running tests to be as seamless as possible &amp;#8211; no context switching of jumping out to a terminal, etc etc. We can accomplish this in Emacs using the ruby-test-mode package. First install and configure it in your init file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package-list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;better-defaults&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;solarized-theme&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-projectile&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;helm-ag&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;ruby-electric&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;seeing-is-believing&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;chruby&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;inf-ruby&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;ruby-test-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ruby-test-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ruby-mode-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ruby-test-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Restart Emacs, then open a Ruby test file. Experiment with the keybinding &amp;#8220;C-c C-,&amp;#8221; - it should allow you to run the tests from the current file into a second buffer called a compilation buffer. Tests from directly within emacs &amp;#8211; pretty neat!&lt;/p&gt;
&lt;p&gt;By default, ruby-test-mode will try to evaluate tests in the current buffer. It determines whether the current buffer contains tests based on whether its filename ends in &lt;code&gt;_test.rb&lt;/code&gt; or &lt;code&gt;_spec.rb&lt;/code&gt; &amp;#8211; so if you don&amp;#8217;t follow these conventions it may behave erratically for you.&lt;/p&gt;
&lt;p&gt;If the current buffer is &lt;i&gt;not&lt;/i&gt; a Ruby test, it will try to do one of the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If there is a visible test buffer in another window (for example, you have 2 windows open in a side-by-side split), it will run that one. This is great for putting a test and an implementation up side-by-side and being able to run the test from either window.&lt;/li&gt;
  &lt;li&gt;If none of these are available, it will try to re-run whatever test was last run, if there is one&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Improving Ruby Test Mode Interaction&lt;/h3&gt;
&lt;p&gt;This setup is coming along pretty nicely, but I find dealing with all the compilation buffers created by ruby-test-mode a little cumbersome. By default it pulls them up in a new window, which potentially covers up something you were working on before, or at least takes up half of your frame. Then you have to manually swap over and kill the buffer if you want to get rid of it.&lt;/p&gt;
&lt;p&gt;We can make this a little smoother by hooking into the compilation completion hook and setting up a keybinding to easily close the buffer:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;compilation-finish-functions&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;strg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;switch-to-buffer-other-window&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;*compilation*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read-only-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goto-char&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point-max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;local-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;q&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;quit-restore-window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now when ruby-test-mode finishes our tests, we will automatically jump to the test buffer and scroll to the bottom.&lt;/p&gt;
&lt;p&gt;Additionally, within the compliation buffer we&amp;#8217;ll use the simple keybinding &lt;code&gt;q&lt;/code&gt; to close the buffer and return to whatever frame configuration we had before. I find this makes a much more seamless TDD workflow. We can run tests, quickly check out the results, and quit out to return to what you were doing before &amp;#8211; all without leaving Emacs.&lt;/p&gt;
&lt;h2&gt;Wrapup and Further Exploration&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ve published a github repo containing the final product of this tutorial &lt;a href=&quot;https://github.com/worace/emacs-for-ruby&quot;&gt;here&lt;/a&gt;. I&amp;#8217;ll try to keep it (and this post) up to date as I uncover any problems or receive feedback. The biggest goal here was to keep things as simple and minimal as possible &amp;#8211; the whole thing comes in around 80 lines of Elisp using 10 or so packages.&lt;/p&gt;
&lt;p&gt;With this setup, the main things we accomplished include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Drag Emacs into the modern era using some sane defaults and a bit of UI polishing&lt;/li&gt;
  &lt;li&gt;Create a reasonably beginner-friendly environment that incorporates 2 of the killer convenience features of more mainstream editors like Sublime or Atom (Ctrl-P and Find-in-project)&lt;/li&gt;
  &lt;li&gt;Assemble a simple toolset for interactive Ruby development &amp;#8211; we can evaluate code in a buffer, start an embedded IRB process, and run our tests all from within Emacs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A few things that are obviously &lt;i&gt;not&lt;/i&gt; included (and where to find them) include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Rails-specific workflow features (check out &lt;a href=&quot;https://github.com/eschulte/rinari&quot;&gt;rinari&lt;/a&gt; if you want to use emacs to work on Rails)&lt;/li&gt;
  &lt;li&gt;Version control integration (&lt;a href=&quot;https://magit.vc/&quot;&gt;magit&lt;/a&gt; is the cadillac of in-editor VCS integrations)&lt;/li&gt;
  &lt;li&gt;Other language modes or integrations &amp;#8211; if it runs on a computer there&amp;#8217;s probably an Emacs mode for it &amp;#8211; dig around and see what exists for your favorite languages&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>RSA Cryptography In Clojure</title>
   <link href="http://worace.works/2016/06/05/rsa-cryptography-in-clojure/"/>
   <updated>2016-06-05T00:00:00-07:00</updated>
   <id>http://worace.works/2016/06/05/rsa-cryptography-in-clojure</id>
   <content type="html">&lt;p&gt;I recently found myself needing to do some public/private key cryptography using RSA in Clojure. Fortunately there is pretty good library support for doing this kind of thing in Java, but it still took me a while to get all of the interop working. Additionally, I needed to be able to serialize and de-serialize keys in a couple of formats (.pem and .der, specifically), so we&amp;#8217;ll look at setting this up as well.&lt;/p&gt;
&lt;h2&gt;Generating a Keypair&lt;/h2&gt;
&lt;p&gt;Keys are generated based on the desired length and algorithm. To generate a key we have to do a little bit of Java ceremony around requesting a &lt;code&gt;KeyPairGenerator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can use this to generate a Private Key, and from that Private Key retrieve the Public Key if needed.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kp-generator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;doto &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java.security.KeyPairGenerator/getInstance&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;RSA&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.initialize&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;generate-keypair&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;assert &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;= &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;RSA Key must be at least 512 bits long.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.generateKeyPair&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kp-generator&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;keypair&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;generate-keypair&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;public-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getPublic&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;keypair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Encrypting, Decrypting, and Encoding Messages&lt;/h2&gt;
&lt;p&gt;The Java crypto methods we&amp;#8217;re using generally return a Byte Array of their encrypted data. For my use-case I wanted to encode these in Base64, which is easy in Java 8 thanks to the built-in Base64 module (For earlier versions, check out &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/javax/xml/bind/DatatypeConverter.html&quot;&gt;javax.xml.bind.DatatypeConverter&lt;/a&gt;).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;decode64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.decode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java.util.Base64/getDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;encode64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.encodeToString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java.util.Base64/getEncoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can use the keys we generated to encrypt and decrypt a message. This being public/private key crypto, remember of course that encryption is done using the public key and decryption using the private.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;encrypt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;public-key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Perform RSA public key encryption of the given message string.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   Returns a Base64-encoded string of the encrypted data.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode64&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cipher&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;doto &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;javax.crypto.Cipher/getInstance&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;RSA/ECB/PKCS1Padding&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.init&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;javax.crypto.Cipher/ENCRYPT_MODE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;public-key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.doFinal&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cipher&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getBytes&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;decrypt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;private-key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Use an RSA private key to decrypt a Base64-encoded string&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   of ciphertext.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cipher&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;doto &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;javax.crypto.Cipher/getInstance&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;RSA/ECB/PKCS1Padding&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.init&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;javax.crypto.Cipher/DECRYPT_MODE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;private-key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;
         &lt;span class=&quot;nv&quot;&gt;decode64&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.doFinal&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;apply &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Signing and Verifying&lt;/h2&gt;
&lt;p&gt;The other big asymmetric crypto operation is to sign using a private key and verify using a public key. This is pretty easy with a bit of Java interop as well.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sign&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;RSA private key signing of a message. Takes message as string&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;private-key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode64&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;msg-data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getBytes&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;nv&quot;&gt;sig&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;doto &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java.security.Signature/getInstance&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;SHA256withRSA&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.initSign&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;private-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java.security.SecureRandom.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.update&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;msg-data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.sign&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;verify&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;encoded-sig&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;public-key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;RSA public key verification of a Base64-encoded signature and an&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   assumed source message. Returns true/false if signature is valid.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;msg-data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getBytes&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;signature&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decode64&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;encoded-sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;sig&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;doto &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java.security.Signature/getInstance&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;SHA256withRSA&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.initVerify&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;public-key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.update&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;msg-data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.verify&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sig&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Serializing and Deserializing Keys&lt;/h2&gt;
&lt;p&gt;Finally for my use-case it was important to be able to serialize and de-serialize keys in a format that would be readable by other systems. I found this part the trickiest to get working due to relatively sparse documentation and some confusion about the various formats and key serialization algorithms, but here it is.&lt;/p&gt;
&lt;h3&gt;DER Encoding Public Keys&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;der-string-&amp;gt;pub-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Generate an RSA public key from a DER-encoded Base64 string.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   Some systems like to line-wrap these at 64 characters, so we&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   have to get rid of any newlines before decoding.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;non-wrapped&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clojure.string/replace&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;key-bytes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decode64&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;non-wrapped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;spec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java.security.spec.X509EncodedKeySpec.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key-bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;key-factory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java.security.KeyFactory/getInstance&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;RSA&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.generatePublic&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key-factory&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;public-key-&amp;gt;der-string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Generate DER-formatted string for a public key.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;.getEncoded&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;encode64&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clojure.string/replace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;DER Encoding Private Keys&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;der-string-&amp;gt;private-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.generatePrivate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java.security.KeyFactory/getInstance&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;RSA&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java.security.spec.PKCS8EncodedKeySpec.&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decode64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getBytes&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;private-key-&amp;gt;der-string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pk&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;.getEncoded&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;java.security.spec.PKCS8EncodedKeySpec.&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;.getEncoded&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;encode64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;PEM-Encoding&lt;/h2&gt;
&lt;p&gt;PEM-encoding is another common format for serializing cryptographic keys. I was able to get everything so far working using just pieces from Java&amp;#8217;s standard library, but after much experimentation could never get it to read PEM-encoded keys reliably. So I ended up reaching for &lt;a href=&quot;https://www.bouncycastle.org/java.html&quot;&gt;Bouncy Castle&lt;/a&gt;, one of the go-to crypto Java crypto libraries.&lt;/p&gt;
&lt;p&gt;BC supports a sizeable menu of different signing, hashing, and encryption algorithms. Fortunately for me reading and writing PEM keys was tucked in among them.&lt;/p&gt;
&lt;p&gt;To pull in BouncyCastle I used this &lt;code&gt;project.clj&lt;/code&gt; configuration for leiningen:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defproject &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;block-chain&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0.2.0&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:dependencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org.clojure/clojure&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1.8.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org.bouncycastle/bcpkix-jdk15on&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1.53&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then used it to decode the keys.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; Have to do this bit of setup first so the keyparsers&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; can find BouncyCastle&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java.security.Security/addProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;org.bouncycastle.jce.provider.BouncyCastleProvider.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;keydata&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;reader&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;org.bouncycastle.openssl.PEMParser.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.readObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pem-string-&amp;gt;key-pair&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Convert a PEM-formatted private key string to a public/private keypair.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   Returns java.security.KeyPair.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;keydata&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;io/reader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getBytes&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getKeyPair&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;kd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pem-string-&amp;gt;pub-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Convert a PEM-formatted public key string to an RSA public key.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   Returns sun.security.rsa.RSAPublicKeyImpl&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;keydata&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;io/reader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getBytes&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;kf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java.security.KeyFactory/getInstance&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;RSA&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;spec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java.security.spec.X509EncodedKeySpec.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getEncoded&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;kd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.generatePublic&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;kf&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;format-pem-string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;encoded&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key-type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Takes a Base64-encoded string of key data and formats it&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   for file-output following openssl&amp;#39;s convention of wrapping lines&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   at 64 characters and appending the appropriate header and footer for&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   the specified key type&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;chunked&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;encoded&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;apply str &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;formatted&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;join &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;chunked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;-----BEGIN &amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key-type&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;-----\n&amp;quot;&lt;/span&gt;
         &lt;span class=&quot;nv&quot;&gt;formatted&lt;/span&gt;
         &lt;span class=&quot;s&quot;&gt;&amp;quot;\n-----END &amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key-type&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;-----\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;private-key-&amp;gt;pem-string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Convert RSA private keypair to a formatted PEM string for saving in&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   a .pem file. By default these private keys will encode themselves as PKCS#8&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   data (e.g. when calling (.getEncoded private-key)), so we have to convert it&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   to ASN1, which PEM uses (this seems to also be referred to as PKCS#1).&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   More info here http://stackoverflow.com/questions/7611383/generating-rsa-keys-in-pkcs1-format-in-java&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getEncoded&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;org.bouncycastle.asn1.pkcs.PrivateKeyInfo/getInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.parsePrivateKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.toASN1Primitive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getEncoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format-pem-string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;RSA PRIVATE KEY&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;public-key-&amp;gt;pem-string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Generate PEM-formatted string for a public key. This is simply a base64&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   encoding of the key wrapped with the appropriate header and footer.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format-pem-string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getEncoded&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                     &lt;span class=&quot;s&quot;&gt;&amp;quot;PUBLIC KEY&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One last note about PEM formatting and keys &amp;#8211; in some instances a PEM key is simply the same Base64-encoded DER representation of the key wrapped with the &amp;#8220;BEGIN KEY&amp;#8221; / &amp;#8220;END KEY&amp;#8221; header and footer. However the PEM format can be used slightly differently by a variety of key types, and because of this it sometimes needs to include additional metadata about what key format is being encoded.&lt;/p&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;p&gt;The ins and outs of serializing cryptographic keys can get pretty complex, and there are unfortunately a lot of ways to do things using very similar encoding formats. I&amp;#8217;ve managed to cobble together enough for the use-cases I needed here, but if you&amp;#8217;d like to understand more, &lt;a href=&quot;https://tls.mbed.org/kb/cryptography/asn1-key-structures-in-der-and-pem&quot;&gt;here is a good article&lt;/a&gt; that goes into more depth.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hash Array Mapped Tries</title>
   <link href="http://worace.works/2016/05/24/hash-array-mapped-tries/"/>
   <updated>2016-05-24T00:00:00-07:00</updated>
   <id>http://worace.works/2016/05/24/hash-array-mapped-tries</id>
   <content type="html">&lt;p&gt;A Hash Array Mapped Trie (HAMT) is a structure for organizing arbitrary data in a broadly-branching tree. HAMTs are commonly used to build immutable Hash Maps in functional programming languages. By using a value&amp;#8217;s hash code to represent a unique &amp;#8220;path&amp;#8221; into the tree, we can build a Hash Map on top of a tree, rather than on an Array-based table as is more commonly seen. The structure is more complex than a simple Hash Table, but provides a few key benefits, including:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ability to grow the map indefinitely without re-sizing or chaining (no re-hashing penalties)&lt;/li&gt;
  &lt;li&gt;Ability to share repeated structure between similar trees&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This last point is very powerful from the perspective of copying or modifying &amp;#8211; we can represent a modified copy of a Hash Trie by duplicating any changed values but sharing the remaining (unchanged) structure with the previous tree. We get the conceptual benefits of an immutable structure but the efficiency of a traditional mutable collection.&lt;/p&gt;
&lt;p&gt;Hash Tries have been getting a lot of attention over the last several years as a means of implementing efficient immutable data structures, especially for functional programming languages. I learned about them through exploring Clojure, which uses HAMTs as the basis for its &lt;a href=&quot;https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/PersistentHashMap.java&quot;&gt;immutable hash-maps&lt;/a&gt;. They also make an appearance in &lt;a href=&quot;https://github.com/scala/scala/blob/808f3d071e97aa23b797f2c0616c207ff1f20229/src/library/scala/collection/immutable/HashMap.scala&quot;&gt;Scala&lt;/a&gt;, &lt;a href=&quot;https://hackage.haskell.org/package/unordered-containers-0.2.7.0/docs/Data-HashMap-Strict.html&quot;&gt;Haskell&lt;/a&gt;, and Elixir.&lt;/p&gt;
&lt;h2&gt;HAMT Structure&lt;/h2&gt;
&lt;p&gt;To implement this data structure, we&amp;#8217;ll rely on a few key tools:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;A Hashing Algorithm for uniquely differentiating pieces of data. Many
    languages already provide this &amp;#8211; in Ruby you can access an object&amp;#8217;s
    hashcode by calling &lt;code&gt;#hash&lt;/code&gt; on it, or you can use a hashing function
    like the &lt;code&gt;SHA1&lt;/code&gt; implementation including in the &lt;code&gt;digest&lt;/code&gt; library.&lt;/li&gt;
  &lt;li&gt;A trie with very high branching factor &amp;#8211; this lets us store lots of
    data in a very shallow (and speedy) structure.&lt;/li&gt;
  &lt;li&gt;Bitwise operations to &amp;#8220;consume&amp;#8221; the data&amp;#8217;s hash code in small chunks,
    turning a hash code into a &amp;#8220;path&amp;#8221; to the data&amp;#8217;s location in the trie.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So what does all this look like in practice? Let&amp;#8217;s look at an example
  creating a HAMT of order 32.&lt;/p&gt;
&lt;p&gt;Within the trie, each level can store 3 things:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;A key&lt;/li&gt;
  &lt;li&gt;An associated value&lt;/li&gt;
  &lt;li&gt;Connections to up to 32 nested child trees&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When we want to insert a key-value pair, we&amp;#8217;ll use the key&amp;#8217;s hash code
  to choose a path through the trie until we find an empty position to
  insert it.&lt;/p&gt;
&lt;p&gt;For retrieval, we simply do the same thing in reverse &amp;#8211; hash the key,
  find the pathway through the trie represented by this hashcode, and
  check tree nodes until we either find the desired key or &amp;#8220;bottom out&amp;#8221; at
  the end of the tree.&lt;/p&gt;
&lt;h2&gt;Insertion Algorithm&lt;/h2&gt;
&lt;p&gt;Let&amp;#8217;s walk through the insertion process in more detail.&lt;/p&gt;
&lt;p&gt;To insert a piece of data, we need to find an appropriate path in the
  trie in which to place it. As we&amp;#8217;ll see, this path is ultimately
  determined by the key&amp;#8217;s hash value.&lt;/p&gt;
&lt;p&gt;As we walk down the trie, we&amp;#8217;ll be looking for 3 possible cases:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The current trie node is empty, so we can insert our new key and
    value here&lt;/li&gt;
  &lt;li&gt;The current trie node is not empty, but its key is equal to the one
    we are trying to insert, so we can overwrite its value&lt;/li&gt;
  &lt;li&gt;The current trie node is not empty, and its key value is not equal to
    ours, so we need to go deeper in the trie.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Insertion Case 1&lt;/h4&gt;
&lt;p&gt;Consider inserting a new K/V pair into an empty trie. We&amp;#8217;ll insert the
  key &amp;#8220;pizza&amp;#8221; with the value &amp;#8220;yum&amp;#8221;. Our trie is empty so far, so the root
  tree node has no key and value, so we can insert our pair there.&lt;/p&gt;
&lt;p&gt;Pretty easy so far.&lt;/p&gt;
&lt;h4&gt;Insertion Case 2&lt;/h4&gt;
&lt;p&gt;Let&amp;#8217;s get the second easy case out of the way &amp;#8211; overwriting that K/V
  pair. We can insert the key &amp;#8220;pizza&amp;#8221; again, this time with the value of
  &amp;#8220;real yum&amp;#8221;.&lt;/p&gt;
&lt;p&gt;We find that the root node is not empty, but its key is equal to the one
  we&amp;#8217;re trying to insert, so we simply change the value.&lt;/p&gt;
&lt;p&gt;Also pretty easy.&lt;/p&gt;
&lt;h4&gt;Insertion Case 3&lt;/h4&gt;
&lt;p&gt;Here is where things start to get more interesting.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s insert the key &amp;#8220;calzone&amp;#8221; with the value &amp;#8220;aw yiss&amp;#8221;.&lt;/p&gt;
&lt;p&gt;We first check the current (root) node &amp;#8211; it does have a key and value,
  and the key is &lt;i&gt;not&lt;/i&gt; the one we&amp;#8217;re trying to insert. We need to go
  deeper into the trie to find a place for our new pair.&lt;/p&gt;
&lt;p&gt;To insert a key, we first need to generate its hash value. Again, in
  Ruby, we can use one of the hashing functions included in the Digest
  library. This gives us a (large) numeric value representing a unique
  digest of that piece of data.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;digest&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Digest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SHA1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexdigest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;calzone&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;334703588949583183218034173573122019749278332384&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To walk the trie and an appropriate location for this element, we&amp;#8217;ll
  &amp;#8220;consume&amp;#8221; this hash-code in 5-bit chunks.&lt;/p&gt;
&lt;p&gt;Why 5 bits at a time?&lt;/p&gt;
&lt;p&gt;This is determined by the branching factor of the tree &amp;#8211; with an
  order-32 trie, we have 32 possible children from each node in the tree.
  A 5-bit hash-code chunk allows us to concisely represent all 32 possible
  child branches using a single bitmap. &lt;code&gt;(=2 ** 5 == 32)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To get the numeric value of the first 5 bits of our hashcode, we can
  bitwise &lt;code&gt;AND&lt;/code&gt; it with a 5-bit number containing all &amp;#8220;on&amp;#8221; bits:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;11111&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Digest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SHA1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexdigest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;calzone&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This tells us that the &amp;#8220;right-most&amp;#8221; 5 bits of the number
  &lt;code&gt;334703588949583183218034173573122019749278332384&lt;/code&gt; (&amp;#8220;calzone&amp;#8220;&amp;#8216;s hash code)
  are &lt;code&gt;00000&lt;/code&gt;, or 0.&lt;/p&gt;
&lt;p&gt;This tells us the position in the current node&amp;#8217;s children array to
  insert this element.&lt;/p&gt;
&lt;p&gt;Thus we can move to the &lt;code&gt;0&lt;/code&gt; th subtree under our current one and retry
  our insertion algorithm. In our case, &amp;#8220;calzone&amp;#8221; is only the second
  element to be inserted in the trie, so the =0=th child of the &amp;#8220;pizza&amp;#8221;
  node will be empty, and we can insert our data there.&lt;/p&gt;
&lt;h4&gt;Consuming the hash code&lt;/h4&gt;
&lt;p&gt;We mentioned that we would &amp;#8220;consume&amp;#8221; the key&amp;#8217;s hash code in 5-bit
  chunks. This helps us fully exploit the wide branching factor of the
  trie to insert a lot of elements in a fairly shallow data structure.&lt;/p&gt;
&lt;p&gt;If we simply re-use the same 5 (rightmost) bits that we used in the
  previous example, we effectively turn our trie into a collection of 32
  linked lists, since all elements that share an initial 5-bit value will
  stack up on one another in a chain.&lt;/p&gt;
&lt;p&gt;We would prefer to get more of a &amp;#8220;zig-zag&amp;#8221; effect, and we can achieve
  this by making sure we use a different 5-bit chunk at each layer in the
  trie.&lt;/p&gt;
&lt;p&gt;To do this, we&amp;#8217;ll use another bit-wise operator, the &lt;b&gt;right shift&lt;/b&gt;.&lt;/p&gt;
&lt;p&gt;A bitwise shift simply takes the bits that make a number and slides them in one direction or another.&lt;/p&gt;
&lt;p&gt;In the case of a left shift, we move the existing bits to the left, usually padding them with 0&amp;#8217;s on the righthand side.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1111&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;11110000&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In our case, we just want to consume the next 5 bits of our hash code value, so we can use a right shift of 5 bits.&lt;/p&gt;
&lt;p&gt;Consider our &amp;#8220;calzone&amp;#8221; example from before:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Digest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SHA1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexdigest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;calzone&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We now get a completely different subtrie index, helping us avoid the &amp;#8220;stacking&amp;#8221; behavior we would get if we just re-used the existing one. As we walk down the trie, we want to use this technique to shift off 5 bits at each layer.&lt;/p&gt;
&lt;h2&gt;Retrieval Algorithm&lt;/h2&gt;
&lt;p&gt;The retrieval process is effectively the same. We&amp;#8217;ll simply retrieve the
  located value rather than inserting one. Consider the same 3 cases:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The current tree node is empty &amp;#8211; this means we have &amp;#8220;bottomed out&amp;#8221;,
    so our key must not exist in the trie&lt;/li&gt;
  &lt;li&gt;The current tree node contains the key you&amp;#8217;re searching for, so
    retrieve its value.&lt;/li&gt;
  &lt;li&gt;The current tree node is not empty, but doesn&amp;#8217;t contain the key we&amp;#8217;re
    looking for. Use another 5-bit slice of the hash code to identify the
    next step to take into the trie.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;HAMT Performance&lt;/h1&gt;
&lt;p&gt;The strength of the HAMT is its wide branching factor. The 32-bit factor is common because it can be manipulated efficiently on 32-bit processors, but you could in theory use an even larger factor if needed.&lt;/p&gt;
&lt;p&gt;This branching factor allows us to store a large amount of keys and values in a relatively shallow tree which will still be very quick to traverse.&lt;/p&gt;
&lt;p&gt;For example in just 6 layers, we could store &lt;code&gt;33,554,432&lt;/code&gt; (&lt;code&gt;32 ** 5&lt;/code&gt;, assuming the root only stores 1 pair) keys and values.&lt;/p&gt;
&lt;p&gt;Technically, the retrieval performance of our Tree will be logarithmic, as opposed to the Constant-time performance offered by traditional Hash Map implementations. However since the log base is so large, the growth flattens out very quickly and in practice isn&amp;#8217;t much worse off than a traditional hash table.&lt;/p&gt;
&lt;h1&gt;Other Considerations &amp;#8211; Structural Sharing&lt;/h1&gt;
&lt;p&gt;We mentioned the ability of our tries to potentially share duplicated
  structure with other tries. This is a common approach to creating
  immutable or &amp;#8220;persistent&amp;#8221; hash maps and is used in several functional
  languages like Clojure, Scala, and Frege.&lt;/p&gt;
&lt;p&gt;The goal for this technique is to preserve every intermediate state of
  the Map (i.e. they &amp;#8220;persist&amp;#8221;). Thus each operation on the map should
  generate a new map value rather than modifying an existing one in place.&lt;/p&gt;
&lt;p&gt;This would be problematic if we had to completely copy every node in the
  trie each time we changed anything. But because of the trie&amp;#8217;s nested
  structure, we have a better option.&lt;/p&gt;
&lt;p&gt;Whenever we need to change the trie, we duplicate the node in question
  as well as all the nodes within its path to the root.&lt;/p&gt;
&lt;p&gt;Thus we get a new root node (this represents the &amp;#8220;new&amp;#8221; Map produced by
  our operation), and a new path to the internal node that was actually
  changed.&lt;/p&gt;
&lt;p&gt;The nodes that we copy can continue referring to the other existing
  nodes so that those don&amp;#8217;t have to be copied. In practice this allows us
  to produce a &amp;#8220;copy&amp;#8221; of the entire trie by actually copying only a
  handful of nodes.&lt;/p&gt;
&lt;h1&gt;Further Reading&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;The data structure was invented by Phil Bagwell, and you can find the original paper on it &lt;a href=&quot;http://lampwww.epfl.ch/papers/idealhashtrees.pdf&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v%3DwASCH_gPnDw&quot;&gt;Rich Hickey discussing HAMTs and other Clojure internals&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v%3DGibNOQVelFY&quot;&gt;ClojureWest Talk about Optimizing Clojure&amp;#8217;s Persistent Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 

</feed>
